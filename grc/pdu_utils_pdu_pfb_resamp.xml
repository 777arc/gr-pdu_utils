<?xml version="1.0"?>
<block>
  <name>PDU PFB Resampler</name>
  <key>pdu_utils_pdu_pfb_resamp_cc</key>
  <category>[Sandia]/PDU Utilities</category>
  <import>import pdu_utils</import>
  <import>from gnuradio import filter</import>
  <make>pdu_utils.pdu_pfb_resamp_$(type)(
#if $taps()
    taps,
#else
    filter.firdes.low_pass_2($nfilts, $nfilts, 0.4, 0.2, 100, filter.firdes.WIN_BLACKMAN_HARRIS)\
    if $(resamp_rate) &lt; 1\
    else filter.optfir.low_pass($nfilts, $nfilts, 0.4, 0.6, .1, 100),
#end if
    $nfilts, $resamp_rate)</make>

  <callback>set_taps($taps)</callback>

  <param>
    <name>Type</name>
    <key>type</key>
    <type>enum</type>
    <option>
      <name>Complex->Complex (Real Taps)</name>
      <key>cc</key>
      <opt>input:complex</opt>
      <opt>output:complex</opt>
      <opt>taps:real_vector</opt>
    </option>
    <option>
      <name>Float->Float (Real Taps)</name>
      <key>ff</key>
      <opt>input:float</opt>
      <opt>output:float</opt>
      <opt>taps:real_vector</opt>
    </option>
  </param>
  <param>
    <name>Resample Rate</name>
    <key>resamp_rate</key>
    <value>1</value>
    <type>float</type>
  </param>
  <param>
    <name>PFB Taps</name>
    <key>taps</key>
    <value></value>
    <type>float_vector</type>
  </param>
  <param>
    <name>N Filters</name>
    <key>nfilts</key>
    <value>32</value>
    <type>int</type>
  </param>

  <sink>
    <name>pdu_in</name>
    <type>message</type>
  </sink>

  <source>
    <name>pdu_out</name>
    <type>message</type>
    <optional>1</optional>
  </source>

  <doc>This block will apply a PFB resampling kernel to input data.</doc>

</block>
